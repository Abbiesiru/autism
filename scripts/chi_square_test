base_dir <- switch(Sys.info()[["nodename"]],
                   "DESKTOP-6HPT8FH" = "C:/Abbie/research/seurat/prepostnatal",
                   "gauss" = "/home/abbiew/single_cell/velmeshev",
                   "."
)

output_folder <- "plots"
output_dir <- file.path(base_dir, output_folder)

# Create folder if it doesn't exist
if (!dir.exists(output_dir)) {
  dir.create(output_dir, recursive = TRUE)
}

library(Seurat)
library(data.table)

seurat_obj_path <- file.path(base_dir, "seurat_obj_subset_common_genes.rds")
seurat_obj <- readRDS(seurat_obj_path)

# Define genes and Lineage cell types
genes <- c("SORCS1", "SORCS2", "SORCS3")
cell_types <- setdiff(unique(seurat_obj$Lineage), "OUT")  # excludes 'OUT'

# Get expression data and metadata
expr_data <- FetchData(seurat_obj, vars = genes)
lineage <- seurat_obj$Lineage

# Create one big data.table
df <- data.table(Cell = colnames(seurat_obj),
                 Lineage = lineage,
                 expr_data)

# Melt the expression data to long format (gene, expression)
df_long <- melt(df, id.vars = c("Cell", "Lineage"),
                variable.name = "Gene", value.name = "Expression")

# Binary expression: 1 = expressed, 0 = not expressed
df_long[, Expressed := as.integer(Expression > 0)]
df_long[, Expression := NULL]  # drop raw expression to save memory

# Preallocate results
results <- list()

# Loop through each gene and cell type
for (gene in genes) {
  for (ct in cell_types) {
    
    subset_dt <- df_long[Gene == gene]
    
    # Logical masks
    in_type <- subset_dt$Lineage == ct
    out_type <- !in_type
    
    expressed <- subset_dt$Expressed == 1
    not_expressed <- !expressed
    
    # a = expressed & in cell type
    # b = not expressed & in cell type
    # c = expressed & not in cell type
    # d = not expressed & not in cell type
    a <- sum(expressed & in_type)
    b <- sum(not_expressed & in_type)
    c <- sum(expressed & out_type)
    d <- sum(not_expressed & out_type)
    
    contingency <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE)
    
    expected <- sum(contingency[1,]) * sum(contingency[,1]) / sum(contingency)
    
    raw_p <- if (a < expected) 1 else chisq.test(contingency)$p.value
    
    results[[length(results) + 1]] <- list(
      Gene = gene,
      CellType = ct,
      A = a, B = b, C = c, D = d,
      RawP = raw_p
    )
  }
}

# Combine and adjust p-values
results_df <- rbindlist(results)
results_df[, AdjustedP := pmin(RawP * .N, 1)]
results_df[, Significant := AdjustedP < 0.05]

# Save or view
fwrite(results_df, file.path(base_dir, "optimized_chisq_results.csv"))
print(results_df[Significant == TRUE])
